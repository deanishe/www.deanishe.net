#!/usr/bin/env zsh

set -e

here="$( cd "$( dirname "$0" )"; pwd )"
aenv="$here/.autoenv.zsh"
bin="$here/themes/alabastard/bin"

buildir="$here/public"
datadir="$here/data"

out_forecast="$datadir/darksky/forecast.json"
out_repos="$datadir/github/repos.json"
out_events="$datadir/github/events.json"
out_pinboard="$datadir/pinboard/posts.json"


# log <arg>... | echo args to STDERR
log() {
  echo "$@" >&2
}

# log <msg> | log <msg> and exit program
fatal() {
  log "fatal error: $1"
  exit 1
}

usage() {
    cat <<EOS
manage [options] [<commit-msg>]

Update/generate/publish blog.


Usage:
    manage [-c] [-e] [-f] [-l] [-p] [-r]
    manage -h


Options:
    -c             Clean build directory before generating site
    -e             Fetch GitHub events
    -f             Fetch DarkSky forecast
    -h             Show this help message and exit
    -l             Fetch Pinboard posts
    -p             Publish site to GitHub Pages
    -r             Fetch GitHub repos


Environment variables:

  The called scripts require that certain environment
  variables be set.

  DARKSKY_API_TOKEN    Required by forecast
  DARKSKY_LOCATION     Required by forecast
  GITHUB_USERNAME      Required by github
  PINBOARD_API_TOKEN   Required by pinboard-public

EOS
}

# defaults
do_clean=false
do_download=false
do_events=false
do_forecast=false
do_pinboard=false
do_repos=false
do_publish=false


while getopts ":cefhlpr" opt; do
  case $opt in
    c)
      do_clean=true
      ;;
    e)
      do_events=true
      ;;
    f)
      do_forecast=true
      ;;
    l)
      do_pinboard=true
      ;;
    r)
      do_repos=true
      ;;
    p)
      do_publish=true
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      log "Invalid option: -$OPTARG"
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

msg="$1"

# Source autoenv file if it exists
test -s "$aenv" && {
  log "Sourcing $aenv ..."
  . "$aenv"
}

cd "$here" &>/dev/null

$do_events && {
  test -n "$GITHUB_USERNAME" || fatal "GitHub username not set"
  mkdir -p "$datadir/github"
  log 'Fetching recent GitHub events...'
  "$bin/github" events "$out_events"
}

$do_repos && {
  test -n "$GITHUB_USERNAME" || fatal "GitHub username not set"
  mkdir -p "$datadir/github"
  log 'Fetching recently-updated GitHub repos...'
  "$bin/github" repos "$out_repos"
}

$do_forecast && {
  test -n "$DARKSKY_API_TOKEN" || fatal "DarkSky API token not set"
  test -n "$DARKSKY_LOCATION" || fatal "DarkSky location not set"
  mkdir -p "$datadir/darksky"
  log 'Fetching weather forecast...'
  "$bin/forecast" "$out_forecast"
}

$do_pinboard && {
  test -n "$PINBOARD_API_TOKEN" || fatal "Pinboard API token not set"
  mkdir -p "$datadir/pinboard"
  log 'Fetching Pinboard posts...'
  "$bin/pinboard-public" "$out_pinboard"
}

# $do_download && {
#   test -n "$ghuser" || fatal "GitHub username not specified"
#   test -n "$dslocation" || fatal "DarkSky location not specified"

#   mkdir -p "$datadir"/{pinboard,github,darksky}

#   log 'Fetching recent GitHub repos...'
#   "$bin/github" repos "$ghuser" "$out_repos"
#   log 'Fetching recent GitHub events...'
#   "$bin/github" events "$ghuser" "$out_events"
#   log 'Fetching DarkSky forecast...'
#   "$bin/forecast" --location "$dslocation" "$out_forecast"
#   log 'Fetching recent Pinboard posts...'
#   "$bin/pinboard-public" "$out_pinboard"
# }

$do_clean && {
  log "Cleaning build directory ..."
  test -d "$buildir" && rm -rf "$buildir"/*
  mkdir -p "$buildir"
}

log "Generating site..."
~/bin/hugo

$do_publish && {
  test -n "$msg" || msg="rebuilt site $( date )"
  log "Committing update..."
  cd "$buildir"
  git add -A
  git commit -m "$msg"
  log "Pushing site to GitHub Pages..."
  git push origin master
  cd -
}

cd - &>/dev/null
exit 0